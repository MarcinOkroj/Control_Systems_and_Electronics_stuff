
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000267c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002804  08002804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002834  08002834  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002834  08002834  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002834  08002834  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800283c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002848  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002848  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006748  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000127c  00000000  00000000  00026784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  00027a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000580  00000000  00000000  00028018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbd9  00000000  00000000  00028598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000717f  00000000  00000000  00044171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6778  00000000  00000000  0004b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1a68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001770  00000000  00000000  000f1abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027ec 	.word	0x080027ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080027ec 	.word	0x080027ec

080001c8 <spi_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void spi_write(uint16_t x)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2110      	movs	r1, #16
 80001d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001da:	f000 fe45 	bl	8000e68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &x, 1, 100);
 80001de:	1db9      	adds	r1, r7, #6
 80001e0:	2364      	movs	r3, #100	; 0x64
 80001e2:	2201      	movs	r2, #1
 80001e4:	4806      	ldr	r0, [pc, #24]	; (8000200 <spi_write+0x38>)
 80001e6:	f002 f80a 	bl	80021fe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f2:	f000 fe39 	bl	8000e68 <HAL_GPIO_WritePin>
	}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000028 	.word	0x20000028

08000204 <max7219_write>:

void max7219_write(uint8_t addr, uint8_t dt)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	460a      	mov	r2, r1
 800020e:	71fb      	strb	r3, [r7, #7]
 8000210:	4613      	mov	r3, r2
 8000212:	71bb      	strb	r3, [r7, #6]
spi_write(dt | addr<<8);//sterowanie wyswietlaczem
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	b21a      	sxth	r2, r3
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	021b      	lsls	r3, r3, #8
 800021c:	b21b      	sxth	r3, r3
 800021e:	4313      	orrs	r3, r2
 8000220:	b21b      	sxth	r3, r3
 8000222:	b29b      	uxth	r3, r3
 8000224:	4618      	mov	r0, r3
 8000226:	f7ff ffcf 	bl	80001c8 <spi_write>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}

08000232 <wyswietlanie1>:

void wyswietlanie1(void)
{		//max7219_write(kolumna, ktore ledy ON) 1 jako zapalona
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
max7219_write(1,0x00);//pierwsza kolumna, 0000 0000  1 oznacza zapalona LED
 8000236:	2100      	movs	r1, #0
 8000238:	2001      	movs	r0, #1
 800023a:	f7ff ffe3 	bl	8000204 <max7219_write>
max7219_write(2,0x7F);//druga kolumna, 0111 1111     0 ozanacza zgaszona LED
 800023e:	217f      	movs	r1, #127	; 0x7f
 8000240:	2002      	movs	r0, #2
 8000242:	f7ff ffdf 	bl	8000204 <max7219_write>
max7219_write(3,0x30);//trzecia kolumna, 0011 0000
 8000246:	2130      	movs	r1, #48	; 0x30
 8000248:	2003      	movs	r0, #3
 800024a:	f7ff ffdb 	bl	8000204 <max7219_write>
max7219_write(4,0x08);//czwarta kolumna, 0000 1000
 800024e:	2108      	movs	r1, #8
 8000250:	2004      	movs	r0, #4
 8000252:	f7ff ffd7 	bl	8000204 <max7219_write>
max7219_write(5,0x08);//to samo tylko w odwrotnej kolejnosci
 8000256:	2108      	movs	r1, #8
 8000258:	2005      	movs	r0, #5
 800025a:	f7ff ffd3 	bl	8000204 <max7219_write>
max7219_write(6,0x30);
 800025e:	2130      	movs	r1, #48	; 0x30
 8000260:	2006      	movs	r0, #6
 8000262:	f7ff ffcf 	bl	8000204 <max7219_write>
max7219_write(7,0x7F);
 8000266:	217f      	movs	r1, #127	; 0x7f
 8000268:	2007      	movs	r0, #7
 800026a:	f7ff ffcb 	bl	8000204 <max7219_write>
max7219_write(8,0x00);
 800026e:	2100      	movs	r1, #0
 8000270:	2008      	movs	r0, #8
 8000272:	f7ff ffc7 	bl	8000204 <max7219_write>

}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}

0800027a <wyswietlanie2>:
void wyswietlanie2(void)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
max7219_write(1,0x00);//pierwsza kolumna, 0000 0000
 800027e:	2100      	movs	r1, #0
 8000280:	2001      	movs	r0, #1
 8000282:	f7ff ffbf 	bl	8000204 <max7219_write>
max7219_write(2,0x3C);//druga kolumna, 0011 1100
 8000286:	213c      	movs	r1, #60	; 0x3c
 8000288:	2002      	movs	r0, #2
 800028a:	f7ff ffbb 	bl	8000204 <max7219_write>
max7219_write(3,0x6);//trzecia kolumna, 0100 0010
 800028e:	2106      	movs	r1, #6
 8000290:	2003      	movs	r0, #3
 8000292:	f7ff ffb7 	bl	8000204 <max7219_write>
max7219_write(4,0x0C);//czwarta kolumna, 1000 0001
 8000296:	210c      	movs	r1, #12
 8000298:	2004      	movs	r0, #4
 800029a:	f7ff ffb3 	bl	8000204 <max7219_write>
max7219_write(5,0x18);
 800029e:	2118      	movs	r1, #24
 80002a0:	2005      	movs	r0, #5
 80002a2:	f7ff ffaf 	bl	8000204 <max7219_write>
max7219_write(6,0x30);
 80002a6:	2130      	movs	r1, #48	; 0x30
 80002a8:	2006      	movs	r0, #6
 80002aa:	f7ff ffab 	bl	8000204 <max7219_write>
max7219_write(7,0x60);
 80002ae:	2160      	movs	r1, #96	; 0x60
 80002b0:	2007      	movs	r0, #7
 80002b2:	f7ff ffa7 	bl	8000204 <max7219_write>
max7219_write(8,0xC0);
 80002b6:	21c0      	movs	r1, #192	; 0xc0
 80002b8:	2008      	movs	r0, #8
 80002ba:	f7ff ffa3 	bl	8000204 <max7219_write>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <wyswietlanie3>:

void wyswietlanie3(void)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	af00      	add	r7, sp, #0
max7219_write(1,0x03);//pierwsza kolumna, 0000 0000
 80002c6:	2103      	movs	r1, #3
 80002c8:	2001      	movs	r0, #1
 80002ca:	f7ff ff9b 	bl	8000204 <max7219_write>
max7219_write(2,0x02);//druga kolumna, 0011 1100
 80002ce:	2102      	movs	r1, #2
 80002d0:	2002      	movs	r0, #2
 80002d2:	f7ff ff97 	bl	8000204 <max7219_write>
max7219_write(3,0x42);//trzecia kolumna, 0100 0010
 80002d6:	2142      	movs	r1, #66	; 0x42
 80002d8:	2003      	movs	r0, #3
 80002da:	f7ff ff93 	bl	8000204 <max7219_write>
max7219_write(4,0x81);//czwarta kolumna, 1000 0001
 80002de:	2181      	movs	r1, #129	; 0x81
 80002e0:	2004      	movs	r0, #4
 80002e2:	f7ff ff8f 	bl	8000204 <max7219_write>
max7219_write(5,0x81);//to samo tylko w odwrotnej kolejnosci
 80002e6:	2181      	movs	r1, #129	; 0x81
 80002e8:	2005      	movs	r0, #5
 80002ea:	f7ff ff8b 	bl	8000204 <max7219_write>
max7219_write(6,0x42);
 80002ee:	2142      	movs	r1, #66	; 0x42
 80002f0:	2006      	movs	r0, #6
 80002f2:	f7ff ff87 	bl	8000204 <max7219_write>
max7219_write(7,0x3C);
 80002f6:	213c      	movs	r1, #60	; 0x3c
 80002f8:	2007      	movs	r0, #7
 80002fa:	f7ff ff83 	bl	8000204 <max7219_write>
max7219_write(8,0x00);
 80002fe:	2100      	movs	r1, #0
 8000300:	2008      	movs	r0, #8
 8000302:	f7ff ff7f 	bl	8000204 <max7219_write>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}

0800030a <wyswietlanie4>:

void wyswietlanie4(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
max7219_write(1,0x0C);//pierwsza kolumna, 0000 0000
 800030e:	210c      	movs	r1, #12
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ff77 	bl	8000204 <max7219_write>
max7219_write(2,0x10);//druga kolumna, 0011 1100
 8000316:	2110      	movs	r1, #16
 8000318:	2002      	movs	r0, #2
 800031a:	f7ff ff73 	bl	8000204 <max7219_write>
max7219_write(3,0x20);//trzecia kolumna, 0100 0010
 800031e:	2120      	movs	r1, #32
 8000320:	2003      	movs	r0, #3
 8000322:	f7ff ff6f 	bl	8000204 <max7219_write>
max7219_write(4,0x10);//czwarta kolumna, 1000 0001
 8000326:	2110      	movs	r1, #16
 8000328:	2004      	movs	r0, #4
 800032a:	f7ff ff6b 	bl	8000204 <max7219_write>
max7219_write(5,0x0C);//to samo tylko w odwrotnej kolejnosci
 800032e:	210c      	movs	r1, #12
 8000330:	2005      	movs	r0, #5
 8000332:	f7ff ff67 	bl	8000204 <max7219_write>
max7219_write(6,0x02);
 8000336:	2102      	movs	r1, #2
 8000338:	2006      	movs	r0, #6
 800033a:	f7ff ff63 	bl	8000204 <max7219_write>
max7219_write(7,0x0C);
 800033e:	210c      	movs	r1, #12
 8000340:	2007      	movs	r0, #7
 8000342:	f7ff ff5f 	bl	8000204 <max7219_write>
max7219_write(8,0x10);
 8000346:	2110      	movs	r1, #16
 8000348:	2008      	movs	r0, #8
 800034a:	f7ff ff5b 	bl	8000204 <max7219_write>
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}

08000352 <wyswietlanie5>:

void wyswietlanie5(void)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	af00      	add	r7, sp, #0
max7219_write(1,0x81);//pierwsza kolumna, 0000 0000
 8000356:	2181      	movs	r1, #129	; 0x81
 8000358:	2001      	movs	r0, #1
 800035a:	f7ff ff53 	bl	8000204 <max7219_write>
max7219_write(2,0x42);//druga kolumna, 0011 1100
 800035e:	2142      	movs	r1, #66	; 0x42
 8000360:	2002      	movs	r0, #2
 8000362:	f7ff ff4f 	bl	8000204 <max7219_write>
max7219_write(3,0x48);//trzecia kolumna, 0100 0010
 8000366:	2148      	movs	r1, #72	; 0x48
 8000368:	2003      	movs	r0, #3
 800036a:	f7ff ff4b 	bl	8000204 <max7219_write>
max7219_write(4,0x18);//czwarta kolumna, 1000 0001
 800036e:	2118      	movs	r1, #24
 8000370:	2004      	movs	r0, #4
 8000372:	f7ff ff47 	bl	8000204 <max7219_write>
max7219_write(5,0x18);//to samo tylko w odwrotnej kolejnosci
 8000376:	2118      	movs	r1, #24
 8000378:	2005      	movs	r0, #5
 800037a:	f7ff ff43 	bl	8000204 <max7219_write>
max7219_write(6,0x48);
 800037e:	2148      	movs	r1, #72	; 0x48
 8000380:	2006      	movs	r0, #6
 8000382:	f7ff ff3f 	bl	8000204 <max7219_write>
max7219_write(7,0x42);
 8000386:	2142      	movs	r1, #66	; 0x42
 8000388:	2007      	movs	r0, #7
 800038a:	f7ff ff3b 	bl	8000204 <max7219_write>
max7219_write(8,0x81);
 800038e:	2181      	movs	r1, #129	; 0x81
 8000390:	2008      	movs	r0, #8
 8000392:	f7ff ff37 	bl	8000204 <max7219_write>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <plywajace_swiatlo>:
void plywajace_swiatlo(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	int i=0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
	while (i<2)//powtorzenie 5 razy
 80003a6:	e06a      	b.n	800047e <plywajace_swiatlo+0xe2>
	{
		//Działanie: LEDy beda zapalac sie i gasnac co 0,08s po takim mrugnieciu zapali sie
		  	  	  //kolejna LED, ktora zgasnie po 0,08s
		  	  	  //Kolejnosc LEDow zostala dobrana z pomoca schematu w skrypcie do laboratorium
	HAL_GPIO_TogglePin(LD7_GPIO_Port, LD7_Pin);
 80003a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ac:	4838      	ldr	r0, [pc, #224]	; (8000490 <plywajace_swiatlo+0xf4>)
 80003ae:	f000 fd73 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 80003b2:	2050      	movs	r0, #80	; 0x50
 80003b4:	f000 fad4 	bl	8000960 <HAL_Delay>
	HAL_GPIO_TogglePin(LD7_GPIO_Port, LD7_Pin);
 80003b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003bc:	4834      	ldr	r0, [pc, #208]	; (8000490 <plywajace_swiatlo+0xf4>)
 80003be:	f000 fd6b 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD9_GPIO_Port, LD9_Pin);
 80003c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c6:	4832      	ldr	r0, [pc, #200]	; (8000490 <plywajace_swiatlo+0xf4>)
 80003c8:	f000 fd66 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 80003cc:	2050      	movs	r0, #80	; 0x50
 80003ce:	f000 fac7 	bl	8000960 <HAL_Delay>
	HAL_GPIO_TogglePin(LD9_GPIO_Port, LD9_Pin);
 80003d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d6:	482e      	ldr	r0, [pc, #184]	; (8000490 <plywajace_swiatlo+0xf4>)
 80003d8:	f000 fd5e 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	482b      	ldr	r0, [pc, #172]	; (8000490 <plywajace_swiatlo+0xf4>)
 80003e2:	f000 fd59 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 80003e6:	2050      	movs	r0, #80	; 0x50
 80003e8:	f000 faba 	bl	8000960 <HAL_Delay>
	HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 80003ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f0:	4827      	ldr	r0, [pc, #156]	; (8000490 <plywajace_swiatlo+0xf4>)
 80003f2:	f000 fd51 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD8_GPIO_Port, LD8_Pin);
 80003f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003fa:	4825      	ldr	r0, [pc, #148]	; (8000490 <plywajace_swiatlo+0xf4>)
 80003fc:	f000 fd4c 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 8000400:	2050      	movs	r0, #80	; 0x50
 8000402:	f000 faad 	bl	8000960 <HAL_Delay>
	HAL_GPIO_TogglePin(LD8_GPIO_Port, LD8_Pin);
 8000406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800040a:	4821      	ldr	r0, [pc, #132]	; (8000490 <plywajace_swiatlo+0xf4>)
 800040c:	f000 fd44 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000414:	481e      	ldr	r0, [pc, #120]	; (8000490 <plywajace_swiatlo+0xf4>)
 8000416:	f000 fd3f 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800041a:	2050      	movs	r0, #80	; 0x50
 800041c:	f000 faa0 	bl	8000960 <HAL_Delay>
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000424:	481a      	ldr	r0, [pc, #104]	; (8000490 <plywajace_swiatlo+0xf4>)
 8000426:	f000 fd37 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800042a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042e:	4818      	ldr	r0, [pc, #96]	; (8000490 <plywajace_swiatlo+0xf4>)
 8000430:	f000 fd32 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 8000434:	2050      	movs	r0, #80	; 0x50
 8000436:	f000 fa93 	bl	8000960 <HAL_Delay>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800043a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043e:	4814      	ldr	r0, [pc, #80]	; (8000490 <plywajace_swiatlo+0xf4>)
 8000440:	f000 fd2a 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000448:	4811      	ldr	r0, [pc, #68]	; (8000490 <plywajace_swiatlo+0xf4>)
 800044a:	f000 fd25 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800044e:	2050      	movs	r0, #80	; 0x50
 8000450:	f000 fa86 	bl	8000960 <HAL_Delay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <plywajace_swiatlo+0xf4>)
 800045a:	f000 fd1d 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800045e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000462:	480b      	ldr	r0, [pc, #44]	; (8000490 <plywajace_swiatlo+0xf4>)
 8000464:	f000 fd18 	bl	8000e98 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 8000468:	2050      	movs	r0, #80	; 0x50
 800046a:	f000 fa79 	bl	8000960 <HAL_Delay>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800046e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000472:	4807      	ldr	r0, [pc, #28]	; (8000490 <plywajace_swiatlo+0xf4>)
 8000474:	f000 fd10 	bl	8000e98 <HAL_GPIO_TogglePin>
	i++;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3301      	adds	r3, #1
 800047c:	607b      	str	r3, [r7, #4]
	while (i<2)//powtorzenie 5 razy
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b01      	cmp	r3, #1
 8000482:	dd91      	ble.n	80003a8 <plywajace_swiatlo+0xc>
	}
	i=0;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	48001000 	.word	0x48001000

08000494 <max7219_init>:
void max7219_init(void)
  {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  spi_write(0xB07);//proces inicjalizacji wyswietlacza
 8000498:	f640 3007 	movw	r0, #2823	; 0xb07
 800049c:	f7ff fe94 	bl	80001c8 <spi_write>
  spi_write(0x900);//-||-
 80004a0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80004a4:	f7ff fe90 	bl	80001c8 <spi_write>
  spi_write(0xC01);//-||-
 80004a8:	f640 4001 	movw	r0, #3073	; 0xc01
 80004ac:	f7ff fe8c 	bl	80001c8 <spi_write>
  spi_write(0xF00);//-||-
 80004b0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80004b4:	f7ff fe88 	bl	80001c8 <spi_write>
  spi_write(0xA01);//-||-
 80004b8:	f640 2001 	movw	r0, #2561	; 0xa01
 80004bc:	f7ff fe84 	bl	80001c8 <spi_write>
  wyswietlanie1();//pierwsza klatka
 80004c0:	f7ff feb7 	bl	8000232 <wyswietlanie1>
  HAL_Delay(250);
 80004c4:	20fa      	movs	r0, #250	; 0xfa
 80004c6:	f000 fa4b 	bl	8000960 <HAL_Delay>
  plywajace_swiatlo();//animacja swiatla pomiedzy klatkami
 80004ca:	f7ff ff67 	bl	800039c <plywajace_swiatlo>
  HAL_Delay(200);
 80004ce:	20c8      	movs	r0, #200	; 0xc8
 80004d0:	f000 fa46 	bl	8000960 <HAL_Delay>
  wyswietlanie2();//druga klatka
 80004d4:	f7ff fed1 	bl	800027a <wyswietlanie2>
  HAL_Delay(200);
 80004d8:	20c8      	movs	r0, #200	; 0xc8
 80004da:	f000 fa41 	bl	8000960 <HAL_Delay>
  plywajace_swiatlo();//animacja swiatla pomiedzy klatkami
 80004de:	f7ff ff5d 	bl	800039c <plywajace_swiatlo>
  HAL_Delay(200);
 80004e2:	20c8      	movs	r0, #200	; 0xc8
 80004e4:	f000 fa3c 	bl	8000960 <HAL_Delay>
  wyswietlanie3();//druga klatka
 80004e8:	f7ff feeb 	bl	80002c2 <wyswietlanie3>
  HAL_Delay(200);
 80004ec:	20c8      	movs	r0, #200	; 0xc8
 80004ee:	f000 fa37 	bl	8000960 <HAL_Delay>
  plywajace_swiatlo();//animacja swiatla pomiedzy klatkami
 80004f2:	f7ff ff53 	bl	800039c <plywajace_swiatlo>
  HAL_Delay(100);
 80004f6:	2064      	movs	r0, #100	; 0x64
 80004f8:	f000 fa32 	bl	8000960 <HAL_Delay>
  wyswietlanie4();//druga klatka
 80004fc:	f7ff ff05 	bl	800030a <wyswietlanie4>
  HAL_Delay(200);
 8000500:	20c8      	movs	r0, #200	; 0xc8
 8000502:	f000 fa2d 	bl	8000960 <HAL_Delay>
  plywajace_swiatlo();//animacja swiatla pomiedzy klatkami
 8000506:	f7ff ff49 	bl	800039c <plywajace_swiatlo>
  HAL_Delay(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fa28 	bl	8000960 <HAL_Delay>
  wyswietlanie5();//druga klatka
 8000510:	f7ff ff1f 	bl	8000352 <wyswietlanie5>
  HAL_Delay(100);
 8000514:	2064      	movs	r0, #100	; 0x64
 8000516:	f000 fa23 	bl	8000960 <HAL_Delay>
  }
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}

0800051e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 f9b7 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f807 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f87f 	bl	800062c <MX_GPIO_Init>
  MX_SPI1_Init();
 800052e:	f000 f83f 	bl	80005b0 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  max7219_init();//wywolanie funkcji (inicjalizacja i wyswietlanie)
 8000532:	f7ff ffaf 	bl	8000494 <max7219_init>
  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x18>

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b090      	sub	sp, #64	; 0x40
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f948 	bl	80027dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000566:	2300      	movs	r3, #0
 8000568:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fcac 	bl	8000ecc <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800057a:	f000 f8b9 	bl	80006f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fba0 	bl	8001cdc <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005a2:	f000 f8a5 	bl	80006f0 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3740      	adds	r7, #64	; 0x40
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_SPI1_Init+0x74>)
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <MX_SPI1_Init+0x78>)
 80005b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_SPI1_Init+0x74>)
 80005bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_SPI1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_SPI1_Init+0x74>)
 80005ca:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80005ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_SPI1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_SPI1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_SPI1_Init+0x74>)
 80005de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_SPI1_Init+0x74>)
 80005e6:	2220      	movs	r2, #32
 80005e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_SPI1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_SPI1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_SPI1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_SPI1_Init+0x74>)
 80005fe:	2207      	movs	r2, #7
 8000600:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_SPI1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_SPI1_Init+0x74>)
 800060a:	2208      	movs	r2, #8
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_SPI1_Init+0x74>)
 8000610:	f001 fd4a 	bl	80020a8 <HAL_SPI_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800061a:	f000 f869 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000028 	.word	0x20000028
 8000628:	40013000 	.word	0x40013000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_GPIO_Init+0xbc>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <MX_GPIO_Init+0xbc>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_GPIO_Init+0xbc>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MX_GPIO_Init+0xbc>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <MX_GPIO_Init+0xbc>)
 8000660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_GPIO_Init+0xbc>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fbf5 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <MX_GPIO_Init+0xc0>)
 8000686:	f000 fbef 	bl	8000e68 <HAL_GPIO_WritePin>
                          |LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800068a:	2310      	movs	r3, #16
 800068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 fa66 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80006a8:	f44f 436f 	mov.w	r3, #61184	; 0xef00
 80006ac:	60fb      	str	r3, [r7, #12]
                          |LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	480a      	ldr	r0, [pc, #40]	; (80006ec <MX_GPIO_Init+0xc0>)
 80006c2:	f000 fa57 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD9_Pin */
  GPIO_InitStruct.Pin = LD9_Pin;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006cc:	2303      	movs	r3, #3
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD9_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_GPIO_Init+0xc0>)
 80006dc:	f000 fa4a 	bl	8000b74 <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48001000 	.word	0x48001000

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x44>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x44>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x44>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x44>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x44>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_SPI_MspInit+0x7c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d128      	bne.n	80007b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_SPI_MspInit+0x80>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <HAL_SPI_MspInit+0x80>)
 800076c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_SPI_MspInit+0x80>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_SPI_MspInit+0x80>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <HAL_SPI_MspInit+0x80>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_SPI_MspInit+0x80>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000796:	23a0      	movs	r3, #160	; 0xa0
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a6:	2305      	movs	r3, #5
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f000 f9de 	bl	8000b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013000 	.word	0x40013000
 80007c4:	40021000 	.word	0x40021000

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f884 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <SystemInit+0x20>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <SystemInit+0x20>)
 8000828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800082c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000878 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490e      	ldr	r1, [pc, #56]	; (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0b      	ldr	r4, [pc, #44]	; (800088c <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800086a:	f7ff ffd7 	bl	800081c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086e:	f001 ff91 	bl	8002794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff fe54 	bl	800051e <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000878:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000884:	0800283c 	.word	0x0800283c
  ldr r2, =_sbss
 8000888:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800088c:	20000090 	.word	0x20000090

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f931 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff ff24 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f93b 	bl	8000b5a <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f911 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000000 	.word	0x20000000
 8000918:	20000008 	.word	0x20000008
 800091c:	20000004 	.word	0x20000004

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008
 8000944:	2000008c 	.word	0x2000008c

08000948 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;  
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000008c 	.word	0x2000008c

08000960 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff ffee 	bl	8000948 <HAL_GetTick>
 800096c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_Delay+0x44>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000986:	bf00      	nop
 8000988:	f7ff ffde 	bl	8000948 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff47 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff5c 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff8e 	bl	8000a60 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffb0 	bl	8000ac8 <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b82:	e154      	b.n	8000e2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	2101      	movs	r1, #1
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8146 	beq.w	8000e28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d00b      	beq.n	8000bbc <HAL_GPIO_Init+0x48>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d007      	beq.n	8000bbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb0:	2b11      	cmp	r3, #17
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b12      	cmp	r3, #18
 8000bba:	d130      	bne.n	8000c1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	f003 0201 	and.w	r2, r3, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0xea>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d123      	bne.n	8000ca6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	08da      	lsrs	r2, r3, #3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3208      	adds	r2, #8
 8000c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	691a      	ldr	r2, [r3, #16]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0203 	and.w	r2, r3, #3
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80a0 	beq.w	8000e28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce8:	4b58      	ldr	r3, [pc, #352]	; (8000e4c <HAL_GPIO_Init+0x2d8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a57      	ldr	r2, [pc, #348]	; (8000e4c <HAL_GPIO_Init+0x2d8>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <HAL_GPIO_Init+0x2d8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d00:	4a53      	ldr	r2, [pc, #332]	; (8000e50 <HAL_GPIO_Init+0x2dc>)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d2a:	d019      	beq.n	8000d60 <HAL_GPIO_Init+0x1ec>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <HAL_GPIO_Init+0x2e0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d013      	beq.n	8000d5c <HAL_GPIO_Init+0x1e8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a48      	ldr	r2, [pc, #288]	; (8000e58 <HAL_GPIO_Init+0x2e4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00d      	beq.n	8000d58 <HAL_GPIO_Init+0x1e4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a47      	ldr	r2, [pc, #284]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x1e0>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <HAL_GPIO_Init+0x2ec>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d101      	bne.n	8000d50 <HAL_GPIO_Init+0x1dc>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e008      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d50:	2305      	movs	r3, #5
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d54:	2303      	movs	r3, #3
 8000d56:	e004      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e002      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d60:	2300      	movs	r3, #0
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	f002 0203 	and.w	r2, r2, #3
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	4093      	lsls	r3, r2
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d72:	4937      	ldr	r1, [pc, #220]	; (8000e50 <HAL_GPIO_Init+0x2dc>)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000da4:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dce:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000df8:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f47f aea3 	bne.w	8000b84 <HAL_GPIO_Init+0x10>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010000 	.word	0x40010000
 8000e54:	48000400 	.word	0x48000400
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	48000c00 	.word	0x48000c00
 8000e60:	48001000 	.word	0x48001000
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43d9      	mvns	r1, r3
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	400b      	ands	r3, r1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f000 bef4 	b.w	8001cce <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 816a 	beq.w	80011ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ef6:	4bb3      	ldr	r3, [pc, #716]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d00c      	beq.n	8000f1c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f02:	4bb0      	ldr	r3, [pc, #704]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d159      	bne.n	8000fc2 <HAL_RCC_OscConfig+0xf6>
 8000f0e:	4bad      	ldr	r3, [pc, #692]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1a:	d152      	bne.n	8000fc2 <HAL_RCC_OscConfig+0xf6>
 8000f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d102      	bne.n	8000f4e <HAL_RCC_OscConfig+0x82>
 8000f48:	4b9e      	ldr	r3, [pc, #632]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e015      	b.n	8000f7a <HAL_RCC_OscConfig+0xae>
 8000f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f6a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f76:	4b93      	ldr	r3, [pc, #588]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f86:	fa92 f2a2 	rbit	r2, r2
 8000f8a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f8e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f002 021f 	and.w	r2, r2, #31
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 810c 	beq.w	80011c8 <HAL_RCC_OscConfig+0x2fc>
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 8106 	bne.w	80011c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f000 be86 	b.w	8001cce <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d106      	bne.n	8000fdc <HAL_RCC_OscConfig+0x110>
 8000fce:	4b7d      	ldr	r3, [pc, #500]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a7c      	ldr	r2, [pc, #496]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e030      	b.n	800103e <HAL_RCC_OscConfig+0x172>
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x134>
 8000fe6:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a76      	ldr	r2, [pc, #472]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b74      	ldr	r3, [pc, #464]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a73      	ldr	r2, [pc, #460]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e01e      	b.n	800103e <HAL_RCC_OscConfig+0x172>
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100a:	d10c      	bne.n	8001026 <HAL_RCC_OscConfig+0x15a>
 800100c:	4b6d      	ldr	r3, [pc, #436]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a6c      	ldr	r2, [pc, #432]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a69      	ldr	r2, [pc, #420]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e00b      	b.n	800103e <HAL_RCC_OscConfig+0x172>
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a66      	ldr	r2, [pc, #408]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800102c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a63      	ldr	r2, [pc, #396]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800103e:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	f023 020f 	bic.w	r2, r3, #15
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	495d      	ldr	r1, [pc, #372]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800104e:	4313      	orrs	r3, r2
 8001050:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d059      	beq.n	8001110 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fc74 	bl	8000948 <HAL_GetTick>
 8001060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001064:	e00a      	b.n	800107c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001066:	f7ff fc6f 	bl	8000948 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d902      	bls.n	800107c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	f000 be29 	b.w	8001cce <HAL_RCC_OscConfig+0xe02>
 800107c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001080:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001090:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d102      	bne.n	80010ae <HAL_RCC_OscConfig+0x1e2>
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	e015      	b.n	80010da <HAL_RCC_OscConfig+0x20e>
 80010ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010e6:	fa92 f2a2 	rbit	r2, r2
 80010ea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010ee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010f2:	fab2 f282 	clz	r2, r2
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	f042 0220 	orr.w	r2, r2, #32
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	f002 021f 	and.w	r2, r2, #31
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0ab      	beq.n	8001066 <HAL_RCC_OscConfig+0x19a>
 800110e:	e05c      	b.n	80011ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fc1a 	bl	8000948 <HAL_GetTick>
 8001114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001118:	e00a      	b.n	8001130 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111a:	f7ff fc15 	bl	8000948 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d902      	bls.n	8001130 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	f000 bdcf 	b.w	8001cce <HAL_RCC_OscConfig+0xe02>
 8001130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001134:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001144:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d102      	bne.n	8001162 <HAL_RCC_OscConfig+0x296>
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	e015      	b.n	800118e <HAL_RCC_OscConfig+0x2c2>
 8001162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001166:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800117e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001192:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001196:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800119a:	fa92 f2a2 	rbit	r2, r2
 800119e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011a6:	fab2 f282 	clz	r2, r2
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	f042 0220 	orr.w	r2, r2, #32
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f002 021f 	and.w	r2, r2, #31
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f202 	lsl.w	r2, r1, r2
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1ab      	bne.n	800111a <HAL_RCC_OscConfig+0x24e>
 80011c2:	e002      	b.n	80011ca <HAL_RCC_OscConfig+0x2fe>
 80011c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 816f 	beq.w	80014b8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011da:	4bd0      	ldr	r3, [pc, #832]	; (800151c <HAL_RCC_OscConfig+0x650>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011e6:	4bcd      	ldr	r3, [pc, #820]	; (800151c <HAL_RCC_OscConfig+0x650>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d16c      	bne.n	80012cc <HAL_RCC_OscConfig+0x400>
 80011f2:	4bca      	ldr	r3, [pc, #808]	; (800151c <HAL_RCC_OscConfig+0x650>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d166      	bne.n	80012cc <HAL_RCC_OscConfig+0x400>
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001210:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <HAL_RCC_OscConfig+0x362>
 8001228:	4bbc      	ldr	r3, [pc, #752]	; (800151c <HAL_RCC_OscConfig+0x650>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	e013      	b.n	8001256 <HAL_RCC_OscConfig+0x38a>
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001246:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001252:	4bb2      	ldr	r3, [pc, #712]	; (800151c <HAL_RCC_OscConfig+0x650>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	2202      	movs	r2, #2
 8001258:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800125c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001260:	fa92 f2a2 	rbit	r2, r2
 8001264:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001268:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	f042 0220 	orr.w	r2, r2, #32
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f002 021f 	and.w	r2, r2, #31
 800127c:	2101      	movs	r1, #1
 800127e:	fa01 f202 	lsl.w	r2, r1, r2
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_RCC_OscConfig+0x3cc>
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d002      	beq.n	8001298 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f000 bd1b 	b.w	8001cce <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4ba0      	ldr	r3, [pc, #640]	; (800151c <HAL_RCC_OscConfig+0x650>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	21f8      	movs	r1, #248	; 0xf8
 80012a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012b0:	fa91 f1a1 	rbit	r1, r1
 80012b4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012bc:	fab1 f181 	clz	r1, r1
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	408b      	lsls	r3, r1
 80012c4:	4995      	ldr	r1, [pc, #596]	; (800151c <HAL_RCC_OscConfig+0x650>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	e0f5      	b.n	80014b8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8085 	beq.w	80013e2 <HAL_RCC_OscConfig+0x516>
 80012d8:	2301      	movs	r3, #1
 80012da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ee:	fab3 f383 	clz	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	461a      	mov	r2, r3
 8001300:	2301      	movs	r3, #1
 8001302:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb20 	bl	8000948 <HAL_GetTick>
 8001308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fb1b 	bl	8000948 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d902      	bls.n	8001324 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	f000 bcd5 	b.w	8001cce <HAL_RCC_OscConfig+0xe02>
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001336:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x488>
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <HAL_RCC_OscConfig+0x650>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	e013      	b.n	800137c <HAL_RCC_OscConfig+0x4b0>
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800136c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <HAL_RCC_OscConfig+0x650>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	2202      	movs	r2, #2
 800137e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001382:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001386:	fa92 f2a2 	rbit	r2, r2
 800138a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800138e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001392:	fab2 f282 	clz	r2, r2
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f002 021f 	and.w	r2, r2, #31
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0af      	beq.n	800130e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_RCC_OscConfig+0x650>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	21f8      	movs	r1, #248	; 0xf8
 80013be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013c6:	fa91 f1a1 	rbit	r1, r1
 80013ca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013ce:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013d2:	fab1 f181 	clz	r1, r1
 80013d6:	b2c9      	uxtb	r1, r1
 80013d8:	408b      	lsls	r3, r1
 80013da:	4950      	ldr	r1, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x650>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e06a      	b.n	80014b8 <HAL_RCC_OscConfig+0x5ec>
 80013e2:	2301      	movs	r3, #1
 80013e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001402:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	461a      	mov	r2, r3
 800140a:	2300      	movs	r3, #0
 800140c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fa9b 	bl	8000948 <HAL_GetTick>
 8001412:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	e00a      	b.n	800142e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff fa96 	bl	8000948 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d902      	bls.n	800142e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	f000 bc50 	b.w	8001cce <HAL_RCC_OscConfig+0xe02>
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d102      	bne.n	800145e <HAL_RCC_OscConfig+0x592>
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_RCC_OscConfig+0x650>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	e013      	b.n	8001486 <HAL_RCC_OscConfig+0x5ba>
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001468:	fa93 f3a3 	rbit	r3, r3
 800146c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001476:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <HAL_RCC_OscConfig+0x650>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	2202      	movs	r2, #2
 8001488:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800148c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001490:	fa92 f2a2 	rbit	r2, r2
 8001494:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001498:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800149c:	fab2 f282 	clz	r2, r2
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f042 0220 	orr.w	r2, r2, #32
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	f002 021f 	and.w	r2, r2, #31
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1af      	bne.n	8001418 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80da 	beq.w	800167c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d069      	beq.n	80015a6 <HAL_RCC_OscConfig+0x6da>
 80014d2:	2301      	movs	r3, #1
 80014d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_RCC_OscConfig+0x654>)
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	461a      	mov	r2, r3
 80014f8:	2301      	movs	r3, #1
 80014fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fa24 	bl	8000948 <HAL_GetTick>
 8001500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001504:	e00e      	b.n	8001524 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fa1f 	bl	8000948 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d906      	bls.n	8001524 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e3d9      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	10908120 	.word	0x10908120
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001536:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800153a:	2202      	movs	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	fa93 f2a3 	rbit	r2, r3
 8001548:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001552:	2202      	movs	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001564:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	4ba5      	ldr	r3, [pc, #660]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800156e:	2102      	movs	r1, #2
 8001570:	6019      	str	r1, [r3, #0]
 8001572:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f1a3 	rbit	r1, r3
 800157c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001580:	6019      	str	r1, [r3, #0]
  return result;
 8001582:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0b0      	beq.n	8001506 <HAL_RCC_OscConfig+0x63a>
 80015a4:	e06a      	b.n	800167c <HAL_RCC_OscConfig+0x7b0>
 80015a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	fa93 f2a3 	rbit	r2, r3
 80015b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015bc:	601a      	str	r2, [r3, #0]
  return result;
 80015be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	461a      	mov	r2, r3
 80015d4:	2300      	movs	r3, #0
 80015d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff f9b6 	bl	8000948 <HAL_GetTick>
 80015dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff f9b1 	bl	8000948 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e36b      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
 80015f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015fa:	2202      	movs	r2, #2
 80015fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001612:	2202      	movs	r2, #2
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fa93 f2a3 	rbit	r2, r3
 8001638:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800163c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163e:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001642:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001646:	2102      	movs	r1, #2
 8001648:	6019      	str	r1, [r3, #0]
 800164a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa93 f1a3 	rbit	r1, r3
 8001654:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001658:	6019      	str	r1, [r3, #0]
  return result;
 800165a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fab3 f383 	clz	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1b2      	bne.n	80015e2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8158 	beq.w	800193c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b57      	ldr	r3, [pc, #348]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a56      	ldr	r2, [pc, #344]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b54      	ldr	r3, [pc, #336]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b4f      	ldr	r3, [pc, #316]	; (8001804 <HAL_RCC_OscConfig+0x938>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d11a      	bne.n	8001706 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d0:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCC_OscConfig+0x938>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <HAL_RCC_OscConfig+0x938>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016dc:	f7ff f934 	bl	8000948 <HAL_GetTick>
 80016e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	e009      	b.n	80016fa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff f92f 	bl	8000948 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e2e9      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <HAL_RCC_OscConfig+0x938>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0ef      	beq.n	80016e6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x852>
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a39      	ldr	r2, [pc, #228]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e02f      	b.n	800177e <HAL_RCC_OscConfig+0x8b2>
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x876>
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a33      	ldr	r2, [pc, #204]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4a30      	ldr	r2, [pc, #192]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6213      	str	r3, [r2, #32]
 8001740:	e01d      	b.n	800177e <HAL_RCC_OscConfig+0x8b2>
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d10c      	bne.n	8001766 <HAL_RCC_OscConfig+0x89a>
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4a2a      	ldr	r2, [pc, #168]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6213      	str	r3, [r2, #32]
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a27      	ldr	r2, [pc, #156]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	e00b      	b.n	800177e <HAL_RCC_OscConfig+0x8b2>
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d06b      	beq.n	8001860 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff f8de 	bl	8000948 <HAL_GetTick>
 800178c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f8d9 	bl	8000948 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e291      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
 80017aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017d8:	601a      	str	r2, [r3, #0]
  return result;
 80017da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d109      	bne.n	8001808 <HAL_RCC_OscConfig+0x93c>
 80017f4:	4b01      	ldr	r3, [pc, #4]	; (80017fc <HAL_RCC_OscConfig+0x930>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x958>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	10908120 	.word	0x10908120
 8001804:	40007000 	.word	0x40007000
 8001808:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800180c:	2202      	movs	r2, #2
 800180e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f2a3 	rbit	r2, r3
 800181a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	4bbb      	ldr	r3, [pc, #748]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001828:	2102      	movs	r1, #2
 800182a:	6011      	str	r1, [r2, #0]
 800182c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	fa92 f1a2 	rbit	r1, r2
 8001836:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800183a:	6011      	str	r1, [r2, #0]
  return result;
 800183c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f002 021f 	and.w	r2, r2, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d099      	beq.n	8001792 <HAL_RCC_OscConfig+0x8c6>
 800185e:	e063      	b.n	8001928 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff f872 	bl	8000948 <HAL_GetTick>
 8001864:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	e00b      	b.n	8001882 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff f86d 	bl	8000948 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e225      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
 8001882:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800189e:	2202      	movs	r2, #2
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018b0:	601a      	str	r2, [r3, #0]
  return result;
 80018b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b8:	fab3 f383 	clz	r3, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d102      	bne.n	80018d2 <HAL_RCC_OscConfig+0xa06>
 80018cc:	4b90      	ldr	r3, [pc, #576]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	e00d      	b.n	80018ee <HAL_RCC_OscConfig+0xa22>
 80018d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018d6:	2202      	movs	r2, #2
 80018d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	4b89      	ldr	r3, [pc, #548]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018f2:	2102      	movs	r1, #2
 80018f4:	6011      	str	r1, [r2, #0]
 80018f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	fa92 f1a2 	rbit	r1, r2
 8001900:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001904:	6011      	str	r1, [r2, #0]
  return result;
 8001906:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	fab2 f282 	clz	r2, r2
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f002 021f 	and.w	r2, r2, #31
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1a0      	bne.n	800186a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001928:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001930:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	4a76      	ldr	r2, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 8001936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 81c2 	beq.w	8001ccc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001948:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	f000 819c 	beq.w	8001c8e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	2b02      	cmp	r3, #2
 800195e:	f040 8114 	bne.w	8001b8a <HAL_RCC_OscConfig+0xcbe>
 8001962:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800196a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	fa93 f2a3 	rbit	r2, r3
 8001976:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800197a:	601a      	str	r2, [r3, #0]
  return result;
 800197c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001980:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800198c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	461a      	mov	r2, r3
 8001994:	2300      	movs	r3, #0
 8001996:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7fe ffd6 	bl	8000948 <HAL_GetTick>
 800199c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7fe ffd1 	bl	8000948 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e18b      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
 80019b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ce:	601a      	str	r2, [r3, #0]
  return result;
 80019d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	095b      	lsrs	r3, r3, #5
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d102      	bne.n	80019f0 <HAL_RCC_OscConfig+0xb24>
 80019ea:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	e01b      	b.n	8001a28 <HAL_RCC_OscConfig+0xb5c>
 80019f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	fa93 f2a3 	rbit	r2, r3
 8001a04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a30:	6011      	str	r1, [r2, #0]
 8001a32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	fa92 f1a2 	rbit	r1, r2
 8001a3c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a40:	6011      	str	r1, [r2, #0]
  return result;
 8001a42:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	fab2 f282 	clz	r2, r2
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f042 0220 	orr.w	r2, r2, #32
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f002 021f 	and.w	r2, r2, #31
 8001a58:	2101      	movs	r1, #1
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d19e      	bne.n	80019a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	4925      	ldr	r1, [pc, #148]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a98:	601a      	str	r2, [r3, #0]
  return result;
 8001a9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a9e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aaa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7fe ff47 	bl	8000948 <HAL_GetTick>
 8001aba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7fe ff42 	bl	8000948 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0fc      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
 8001ad4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aec:	601a      	str	r2, [r3, #0]
  return result;
 8001aee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001af2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0xc48>
 8001b08:	4b01      	ldr	r3, [pc, #4]	; (8001b10 <HAL_RCC_OscConfig+0xc44>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	e01e      	b.n	8001b4c <HAL_RCC_OscConfig+0xc80>
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0xe0c>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b54:	6011      	str	r1, [r2, #0]
 8001b56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	fa92 f1a2 	rbit	r1, r2
 8001b60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b64:	6011      	str	r1, [r2, #0]
  return result;
 8001b66:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f002 021f 	and.w	r2, r2, #31
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d09b      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xbf4>
 8001b88:	e0a0      	b.n	8001ccc <HAL_RCC_OscConfig+0xe00>
 8001b8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba2:	601a      	str	r2, [r3, #0]
  return result;
 8001ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fec2 	bl	8000948 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bca:	f7fe febd 	bl	8000948 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e077      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
 8001bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	601a      	str	r2, [r3, #0]
  return result;
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_OscConfig+0xd4c>
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCC_OscConfig+0xe0c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	e01b      	b.n	8001c50 <HAL_RCC_OscConfig+0xd84>
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f107 0318 	add.w	r3, r7, #24
 8001c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f107 0318 	add.w	r3, r7, #24
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_OscConfig+0xe0c>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f107 0210 	add.w	r2, r7, #16
 8001c54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c58:	6011      	str	r1, [r2, #0]
 8001c5a:	f107 0210 	add.w	r2, r7, #16
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	fa92 f1a2 	rbit	r1, r2
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	6011      	str	r1, [r2, #0]
  return result;
 8001c6a:	f107 020c 	add.w	r2, r7, #12
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f002 021f 	and.w	r2, r2, #31
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d19e      	bne.n	8001bca <HAL_RCC_OscConfig+0xcfe>
 8001c8c:	e01e      	b.n	8001ccc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e018      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_RCC_OscConfig+0xe0c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ca4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000

08001cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b09e      	sub	sp, #120	; 0x78
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e162      	b.n	8001fba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d910      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b8d      	ldr	r3, [pc, #564]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	498b      	ldr	r1, [pc, #556]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b89      	ldr	r3, [pc, #548]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e14a      	b.n	8001fba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	497f      	ldr	r1, [pc, #508]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80dc 	beq.w	8001f08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d13c      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xf6>
 8001d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xa6>
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	e00f      	b.n	8001da2 <HAL_RCC_ClockConfig+0xc6>
 8001d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d94:	663b      	str	r3, [r7, #96]	; 0x60
 8001d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d9e:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001da6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001daa:	fa92 f2a2 	rbit	r2, r2
 8001dae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001db2:	fab2 f282 	clz	r2, r2
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f042 0220 	orr.w	r2, r2, #32
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f002 021f 	and.w	r2, r2, #31
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d17b      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0f3      	b.n	8001fba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d13c      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x178>
 8001dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x128>
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e00f      	b.n	8001e24 <HAL_RCC_ClockConfig+0x148>
 8001e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	647b      	str	r3, [r7, #68]	; 0x44
 8001e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40
 8001e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e20:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e2c:	fa92 f2a2 	rbit	r2, r2
 8001e30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e34:	fab2 f282 	clz	r2, r2
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f002 021f 	and.w	r2, r2, #31
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d13a      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0b2      	b.n	8001fba <HAL_RCC_ClockConfig+0x2de>
 8001e54:	2302      	movs	r3, #2
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x1a0>
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e00d      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1bc>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2202      	movs	r2, #2
 8001e9a:	61ba      	str	r2, [r7, #24]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	fa92 f2a2 	rbit	r2, r2
 8001ea2:	617a      	str	r2, [r7, #20]
  return result;
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f042 0220 	orr.w	r2, r2, #32
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f002 021f 	and.w	r2, r2, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e079      	b.n	8001fba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	491a      	ldr	r1, [pc, #104]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fd36 	bl	8000948 <HAL_GetTick>
 8001edc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7fe fd32 	bl	8000948 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e061      	b.n	8001fba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 020c 	and.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1eb      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d214      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 0207 	bic.w	r2, r3, #7
 8001f1e:	4906      	ldr	r1, [pc, #24]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e040      	b.n	8001fba <HAL_RCC_ClockConfig+0x2de>
 8001f38:	40022000 	.word	0x40022000
 8001f3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	491a      	ldr	r1, [pc, #104]	; (8001fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4912      	ldr	r1, [pc, #72]	; (8001fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f7e:	f000 f829 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4601      	mov	r1, r0
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f8c:	22f0      	movs	r2, #240	; 0xf0
 8001f8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	fa92 f2a2 	rbit	r2, r2
 8001f96:	60fa      	str	r2, [r7, #12]
  return result;
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	fab2 f282 	clz	r2, r2
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	40d3      	lsrs	r3, r2
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x2ec>)
 8001fa4:	5cd3      	ldrb	r3, [r2, r3]
 8001fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <HAL_RCC_ClockConfig+0x2f0>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_RCC_ClockConfig+0x2f4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fc84 	bl	80008c0 <HAL_InitTick>
  
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3778      	adds	r7, #120	; 0x78
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08002804 	.word	0x08002804
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b08b      	sub	sp, #44	; 0x2c
 8001fd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d002      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x30>
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d003      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x36>
 8002002:	e03c      	b.n	800207e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002006:	623b      	str	r3, [r7, #32]
      break;
 8002008:	e03c      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002010:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002014:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	fa92 f2a2 	rbit	r2, r2
 800201c:	607a      	str	r2, [r7, #4]
  return result;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	40d3      	lsrs	r3, r2
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_RCC_GetSysClockFreq+0xc8>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	220f      	movs	r2, #15
 8002038:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	fa92 f2a2 	rbit	r2, r2
 8002040:	60fa      	str	r2, [r7, #12]
  return result;
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	fab2 f282 	clz	r2, r2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	40d3      	lsrs	r3, r2
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc4>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	fbb2 f2f3 	udiv	r2, r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
 800206c:	e004      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	e002      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002080:	623b      	str	r3, [r7, #32]
      break;
 8002082:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002084:	6a3b      	ldr	r3, [r7, #32]
}
 8002086:	4618      	mov	r0, r3
 8002088:	372c      	adds	r7, #44	; 0x2c
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	007a1200 	.word	0x007a1200
 800209c:	08002814 	.word	0x08002814
 80020a0:	08002824 	.word	0x08002824
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e09d      	b.n	80021f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ca:	d009      	beq.n	80020e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
 80020d2:	e005      	b.n	80020e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fb22 	bl	8000744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002116:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002120:	d902      	bls.n	8002128 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e002      	b.n	800212e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002136:	d007      	beq.n	8002148 <HAL_SPI_Init+0xa0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002140:	d002      	beq.n	8002148 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	ea42 0103 	orr.w	r1, r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	0c1b      	lsrs	r3, r3, #16
 80021a4:	f003 0204 	and.w	r2, r3, #4
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_SPI_Transmit+0x22>
 800221c:	2302      	movs	r3, #2
 800221e:	e158      	b.n	80024d2 <HAL_SPI_Transmit+0x2d4>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002228:	f7fe fb8e 	bl	8000948 <HAL_GetTick>
 800222c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d002      	beq.n	8002244 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002242:	e13d      	b.n	80024c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_SPI_Transmit+0x52>
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002254:	e134      	b.n	80024c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a0:	d10f      	bne.n	80022c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d007      	beq.n	80022e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022e8:	d94b      	bls.n	8002382 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_SPI_Transmit+0xfa>
 80022f2:	8afb      	ldrh	r3, [r7, #22]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13e      	bne.n	8002376 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	1c9a      	adds	r2, r3, #2
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800231c:	e02b      	b.n	8002376 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d112      	bne.n	8002352 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	1c9a      	adds	r2, r3, #2
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002350:	e011      	b.n	8002376 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002352:	f7fe faf9 	bl	8000948 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d803      	bhi.n	800236a <HAL_SPI_Transmit+0x16c>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d102      	bne.n	8002370 <HAL_SPI_Transmit+0x172>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002374:	e0a4      	b.n	80024c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ce      	bne.n	800231e <HAL_SPI_Transmit+0x120>
 8002380:	e07c      	b.n	800247c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_SPI_Transmit+0x192>
 800238a:	8afb      	ldrh	r3, [r7, #22]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d170      	bne.n	8002472 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d912      	bls.n	80023c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	1c9a      	adds	r2, r3, #2
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b02      	subs	r3, #2
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023be:	e058      	b.n	8002472 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80023e6:	e044      	b.n	8002472 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d12b      	bne.n	800244e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d912      	bls.n	8002426 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	881a      	ldrh	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	1c9a      	adds	r2, r3, #2
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b02      	subs	r3, #2
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002424:	e025      	b.n	8002472 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	330c      	adds	r3, #12
 8002430:	7812      	ldrb	r2, [r2, #0]
 8002432:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800244c:	e011      	b.n	8002472 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800244e:	f7fe fa7b 	bl	8000948 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d803      	bhi.n	8002466 <HAL_SPI_Transmit+0x268>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d102      	bne.n	800246c <HAL_SPI_Transmit+0x26e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002470:	e026      	b.n	80024c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1b5      	bne.n	80023e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f941 	bl	8002708 <SPI_EndRxTxTransaction>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	77fb      	strb	r3, [r7, #31]
 80024bc:	e000      	b.n	80024c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80024be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80024d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024ec:	f7fe fa2c 	bl	8000948 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024fc:	f7fe fa24 	bl	8000948 <HAL_GetTick>
 8002500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	0d1b      	lsrs	r3, r3, #20
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002512:	e054      	b.n	80025be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d050      	beq.n	80025be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800251c:	f7fe fa14 	bl	8000948 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	429a      	cmp	r2, r3
 800252a:	d902      	bls.n	8002532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d13d      	bne.n	80025ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800254a:	d111      	bne.n	8002570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002554:	d004      	beq.n	8002560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d107      	bne.n	8002570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002578:	d10f      	bne.n	800259a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e017      	b.n	80025de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d19b      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000

080025ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80025fa:	f7fe f9a5 	bl	8000948 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800260a:	f7fe f99d 	bl	8000948 <HAL_GetTick>
 800260e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002610:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00da      	lsls	r2, r3, #3
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	0d1b      	lsrs	r3, r3, #20
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002628:	e05f      	b.n	80026ea <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002630:	d106      	bne.n	8002640 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d050      	beq.n	80026ea <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002648:	f7fe f97e 	bl	8000948 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	429a      	cmp	r2, r3
 8002656:	d902      	bls.n	800265e <SPI_WaitFifoStateUntilTimeout+0x72>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d13d      	bne.n	80026da <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800266c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002676:	d111      	bne.n	800269c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002680:	d004      	beq.n	800268c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d107      	bne.n	800269c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800269a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a4:	d10f      	bne.n	80026c6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e010      	b.n	80026fc <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d197      	bne.n	800262a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000000 	.word	0x20000000

08002708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff ff63 	bl	80025ec <SPI_WaitFifoStateUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e027      	b.n	800278c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff fec8 	bl	80024dc <SPI_WaitFlagStateUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e014      	b.n	800278c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2200      	movs	r2, #0
 800276a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff ff3c 	bl	80025ec <SPI_WaitFifoStateUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e000      	b.n	800278c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <__libc_init_array>:
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	4d0d      	ldr	r5, [pc, #52]	; (80027cc <__libc_init_array+0x38>)
 8002798:	4c0d      	ldr	r4, [pc, #52]	; (80027d0 <__libc_init_array+0x3c>)
 800279a:	1b64      	subs	r4, r4, r5
 800279c:	10a4      	asrs	r4, r4, #2
 800279e:	2600      	movs	r6, #0
 80027a0:	42a6      	cmp	r6, r4
 80027a2:	d109      	bne.n	80027b8 <__libc_init_array+0x24>
 80027a4:	4d0b      	ldr	r5, [pc, #44]	; (80027d4 <__libc_init_array+0x40>)
 80027a6:	4c0c      	ldr	r4, [pc, #48]	; (80027d8 <__libc_init_array+0x44>)
 80027a8:	f000 f820 	bl	80027ec <_init>
 80027ac:	1b64      	subs	r4, r4, r5
 80027ae:	10a4      	asrs	r4, r4, #2
 80027b0:	2600      	movs	r6, #0
 80027b2:	42a6      	cmp	r6, r4
 80027b4:	d105      	bne.n	80027c2 <__libc_init_array+0x2e>
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027bc:	4798      	blx	r3
 80027be:	3601      	adds	r6, #1
 80027c0:	e7ee      	b.n	80027a0 <__libc_init_array+0xc>
 80027c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c6:	4798      	blx	r3
 80027c8:	3601      	adds	r6, #1
 80027ca:	e7f2      	b.n	80027b2 <__libc_init_array+0x1e>
 80027cc:	08002834 	.word	0x08002834
 80027d0:	08002834 	.word	0x08002834
 80027d4:	08002834 	.word	0x08002834
 80027d8:	08002838 	.word	0x08002838

080027dc <memset>:
 80027dc:	4402      	add	r2, r0
 80027de:	4603      	mov	r3, r0
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d100      	bne.n	80027e6 <memset+0xa>
 80027e4:	4770      	bx	lr
 80027e6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ea:	e7f9      	b.n	80027e0 <memset+0x4>

080027ec <_init>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr

080027f8 <_fini>:
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fa:	bf00      	nop
 80027fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fe:	bc08      	pop	{r3}
 8002800:	469e      	mov	lr, r3
 8002802:	4770      	bx	lr
